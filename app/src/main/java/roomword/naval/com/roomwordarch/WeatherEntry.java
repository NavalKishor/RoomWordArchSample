package roomword.naval.com.roomwordarch;

import android.arch.persistence.room.Entity;
import android.arch.persistence.room.Ignore;
import android.arch.persistence.room.Index;
import android.arch.persistence.room.PrimaryKey;
import android.support.annotation.NonNull;

import java.util.Date;

/**
 * 1 Make WeatherEntry a @Entity and change the table name to "weather": Right above the WeatherEntry class,
 * add the @Entity annotation. Add the tableName property and
 * set the value to "weather". Without this, the table name would have been "weatherentry".
 *
 *
 * 3 The date field should be unique: The date field is unique because we're only storing the weather for one location,
 * so there should never be two different weather forecasts for a given day. Add the indices property
 * to the @Entity annotation (which is above the class), in addition to the tableName property.
 * The value should be the date column and unique should be set to true.
 * */
@Entity(tableName = "weather", indices = {@Index(value = {"date"}, unique = true)})
public class WeatherEntry
{
    /**
     *2 Define the id as an autogenerated primary key: Above the id field, place the @PrimaryKey annotation.
     * The Sunshine code doesn't have a unique database id for each WeatherEntry because the weather server
     * doesn't return one. To have Room do this for you, add the autoGenerate property to the @PrimaryKey annotation
     * and set its value to true.
     * */
    @PrimaryKey(autoGenerate = true)
    private  int id;
//    private int weatherIconId;
//    private Date date;
//    private double min,  max,  humidity,  pressure,  wind,  degrees;// error related to data binding

    private int weatherIconId;
    @NonNull
    private Date date;
    private double min;
    private double max;
    private double humidity;
    private double pressure;
    private double wind;
    private double degrees;

    // Constructor used by Room to create WeatherEntries
    public WeatherEntry(int id, int weatherIconId, Date date, double min, double max, double humidity, double pressure, double wind, double degrees) {
        this.id = id;
        this.weatherIconId = weatherIconId;
        this.date = date;
        this.min = min;
        this.max = max;
        this.humidity = humidity;
        this.pressure = pressure;
        this.wind = wind;
        this.degrees = degrees;
    }
    /**
     * 4 Provide Room access to the fields: In your case, you want the WeatherEntry class to be read-only:
     * Sunshine will download and display weather data, but it won't ever modify this weather data.
     *
     * To achieve this, keep the fields private, keep the provided getter methods and create
     * an additional constructor that allows Room to set every single field of WeatherEntry.
     * This makes it possible for Room to make WeatherEntity objects for us,
     * but protects those objects from editing after they've been constructed.
     *
     * **/
    public int getId()
    {
        return id;
    }

    public int getWeatherIconId()
    {
        return weatherIconId;
    }

//    public void setWeatherIconId(int weatherIconId)
//    {
//        this.weatherIconId = weatherIconId;
//    }

    public Date getDate()
    {
        return date;
    }

//    public void setDate(Date date)
//    {
//        this.date = date;
//    }

    public double getMin()
    {
        return min;
    }

//    public void setMin(double min)
//    {
//        this.min = min;
//    }

    public double getMax()
    {
        return max;
    }

//    public void setMax(double max)
//    {
//        this.max = max;
//    }

    public double getHumidity()
    {
        return humidity;
    }

//    public void setHumidity(double humidity)
//    {
//        this.humidity = humidity;
//    }

    public double getPressure()
    {
        return pressure;
    }

//    public void setPressure(double pressure)
//    {
//        this.pressure = pressure;
//    }

    public double getWind()
    {
        return wind;
    }

//    public void setWind(double wind)
//    {
//        this.wind = wind;
//    }

    public double getDegrees()
    {
        return degrees;
    }

//    public void setDegrees(double degrees)
//    {
//        this.degrees = degrees;
//    }


    /**
     * 5 Only one constructor should be exposed to Room: Room cannot compile an entity with two constructors
     * because it doesn't know which one to use. Since the constructor without int id is not needed by Room,
     * you can hide it from Room using the @Ignore annotation.
     * */
    @Ignore
    public WeatherEntry( int weatherIconId, Date date, double min, double max, double humidity, double pressure, double wind, double degrees) {

        this.weatherIconId = weatherIconId;
        this.date = date;
        this.min = min;

        this.max = max;
        this.humidity = humidity;
        this.pressure = pressure;
        this.wind = wind;
        this.degrees = degrees;
    }
}
